# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# PAGES                                                                                         #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
GET        /                                      controllers.Application.index
GET        /getDatasets                           controllers.Application.getDatasets()
GET        /changeDataset                         controllers.Application.changeDataset(name: String)
GET        /getDocsByLabel                        controllers.DocumentController.getDocsByLabel(label: String)
GET        /getIndexName                          controllers.DocumentController.getIndexName()
GET        /getLabels                             controllers.DocumentController.getTagLabels()
GET        /addTag                                controllers.DocumentController.addTag(id: Int, label: String)
GET        /removeTag                             controllers.DocumentController.removeTagById(tagId: Int)
GET        /getTagsByDocId                        controllers.DocumentController.getTagsByDocId(id: Int)
GET        /getKeywordsById                       controllers.DocumentController.getKeywordsById(id: Int, size: Int)
GET        /getDocs                               controllers.DocumentController.getDocs(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], keywords: List[String], timeRange: String, timeExprRange: String)
GET        /getDocsByIds                          controllers.DocumentController.getDocsByIds(ids: List[Long])
GET        /induceSubgraph                        controllers.NetworkController.induceSubgraph(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], keywords: List[String], timeRange: String, timeExprRange: String, nodeFraction: Map[String, String])
GET        /addNode                               controllers.NetworkController.addNodes(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, currentNetwork: List[Long], nodes: List[Long])
GET        /blacklistEntitiesById                 controllers.NetworkController.blacklistEntitiesById(ids: List[Long])
GET        /mergeEntitiesById                     controllers.NetworkController.mergeEntitiesById(focalId: Long, duplicates: List[Long])
GET        /getEdgeKeywords                       controllers.NetworkController.getEdgeKeywords(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, first: Long, second: Long, numberOfTerms: Int)
GET        /getNeighborCounts                     controllers.NetworkController.getNeighborCounts(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, nodeId: Long)
GET        /getNeighbors                          controllers.NetworkController.getNeighbors(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, currentNetwork: List[Long], focalNode: Long)
GET        /changeEntityNameById                  controllers.NetworkController.changeEntityNameById(id: Long, newName: String)
GET        /changeEntityTypeById                  controllers.NetworkController.changeEntityTypeById(id: Long, newType: String)
GET        /getEntities                           controllers.EntityController.getEntitiesByType(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, size: Int, entityType: String, filter: List[Long])
GET        /getRecordedEntity                     controllers.EntityController.getRecordedEntity(text: String, enType: String)
GET        /getEntityTypes                        controllers.EntityController.getEntityTypes
GET        /getBlacklisted                        controllers.EntityController.getBlacklistedEntities
GET        /getBlacklistedKeywords                controllers.EntityController.getBlacklistedKeywords
GET        /getMerged                             controllers.EntityController.getMergedEntities
GET        /undoBlacklisting                      controllers.EntityController.undoBlacklistingByIds(ids: List[Long])
GET        /undoMerge                             controllers.EntityController.undoMergeByIds(focalIds: List[Long])
GET        /undoMergeKeywords                     controllers.EntityController.undoMergeKeywords(focalTerms: List[String])
GET        /getEntitiesByDoc                      controllers.EntityController.getEntitiesByDoc(id: Long)
GET        /getBlacklistsByDoc                    controllers.EntityController.getBlacklistsByDoc(id: Long)
GET        /getMetadata                           controllers.MetadataController.getMetadata(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String)
GET        /getMetadataTypes                      controllers.MetadataController.getMetadataTypes
GET        /getSpecificMetadata                   controllers.MetadataController.getSpecificMetadata(fullText: List[String], key: String, generic: Map[String, List[String]], entities: List[Long], instances: List[String], timeRange: String, timeExprRange: String)
GET        /getTimeline                           controllers.HistogramController.getTimeline(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, lod: String)
GET        /getTimeExprTimeline                   controllers.HistogramController.getTimeExprTimeline(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, lod: String)
GET        /getTimelineLOD                        controllers.HistogramController.getTimelineLOD

# Newsleak V.2.0.0 Routes

GET        /induceSubgraphKeyword                 controllers.KeywordNetworkController.induceSubgraphKeyword(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], keywords: List[String], timeRange: String, timeExprRange: String, nodeFraction: Map[String, String])
GET        /addNodeKeyword                        controllers.KeywordNetworkController.addNodesKeyword(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, currentNetwork: List[String], nodes: List[String])
GET        /blacklistEntitiesByIdKeyword          controllers.KeywordNetworkController.blacklistEntitiesByIdKeyword(ids: List[Long])
GET        /mergeKeywords                         controllers.KeywordNetworkController.mergeKeywords(focalId: String, duplicates: List[String])
GET        /blacklistKeywordByKeyTerm             controllers.KeywordNetworkController.blacklistKeywordByKeyTerm(keyword: String)
GET        /changeEntityNameByIdKeyword           controllers.KeywordNetworkController.changeEntityNameByIdKeyword(id: Long, newName: String)
GET        /changeEntityTypeByIdKeyword           controllers.KeywordNetworkController.changeEntityTypeByIdKeyword(id: Long, newType: String)
GET        /getNeighborCountsKeyword              controllers.KeywordNetworkController.getNeighborCountsKeyword(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, nodeId: Long)
GET        /undoBlacklistingKeywords              controllers.KeywordNetworkController.undoBlacklistingKeywords(blacklistedKeywords: List[String])
GET        /toggleTags                            controllers.KeywordNetworkController.toggleTags(state: Boolean)
GET        /getTags                               controllers.KeywordNetworkController.getTags
GET        /setTagKeywordRelation                 controllers.KeywordNetworkController.setTagKeywordRelation(tag: String, keywords: List[String], frequencies: List[Long])
GET        /clearTagKeywordRelation               controllers.KeywordNetworkController.resetTagKeywordRelation

GET        /whitelistEntity                       controllers.EntityController.whitelistEntity(text: String, start: String, end: String, enType: String, docId: String, entId: String)
GET        /whitelistEntityOffset                 controllers.EntityController.whitelistEntityOffset(text: String, start: String, end: String, docId: String, entId: String)

GET        /getESEntitiesByDoc                    controllers.DocumentController.getESEntitiesByDoc(id: String)
GET        /getKeywordsByDoc                      controllers.DocumentController.getKeywordsByDoc(id: String)
GET        /retrieveKeywords                      controllers.DocumentController.retrieveKeywords(id: String)
GET        /getEntitiesTypeByDoc                  controllers.DocumentController.getEntitiesTypeByDoc(id: String, entType: String)
GET        /createInitEntity                      controllers.DocumentController.createInitEntity(docId: String, entId: Int, entName: String, entType: String)
GET        /createNewEntity                       controllers.DocumentController.createNewEntity(docId: String, entId: Int, entName: String, entType: String)
GET        /createInitKeyword                     controllers.DocumentController.createInitKeyword(docId: String, keyword: String)
GET        /createNewKeyword                      controllers.DocumentController.createNewKeyword(docId: String, keyword: String)
GET        /createInitEntityTy1pe                 controllers.DocumentController.createInitEntityType(docId: String, entId: Int, entName: String, entType: String)
GET        /createNewEntityType                   controllers.DocumentController.createNewEntityType(docId: String, entId: Int, entName: String, entType: String)
GET        /getVectorIndexAddress                 controllers.DocumentController.getVectorIndexAddress()
GET        /getMoreLikeThis                       controllers.DocumentController.getMoreLikeThis(id: String, numOfDocs: Int)

GET        /highlightKeysByEnt                    controllers.NetworkController.highlightKeysByEnt(entName: String)
GET        /highlightEntsByKey                    controllers.KeywordNetworkController.highlightEntsByKey(keyName: String)
GET        /multiSearchFilters                    controllers.KeywordNetworkController.multiSearchFilters(docIds: List[String], txts: List[String], kwds: List[String], ents: List[String])

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# JS ROUTING AND RESOURCES                                                                      #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
GET        /assets/javascripts/jsroutes.js        controllers.Application.jsRoutes()
GET        /vassets/*file                         controllers.Assets.versioned(path="/public", file: Asset)
GET        /assets/*file                          controllers.Assets.at(path="/public", file)
